* Handling spoofed account id's
** There is no way(?) to pull the operator account id from a topic message itself
** The app relies on the account id found in the context of the hcs message which comes from the client init method
** Someone could modify the app to send messages to a topic with a spoofed account id in the hcs message context
** Since this project is FOSS a modified app would be easy to create
** Need to either be able to 'sign' a topic message with the operator account id or have some method of locking down a topic to certain accounts. Need to be able to ensure we know who a message is from

* Handling client init
** Client needs persistance to allow users to refresh the app page without having to put in their credentials again
** Can also persist the account id and private key in session storage but this is vulnerable
** Currently using above method to re-initialize client on page reloads
** Could also persist the client server-side and use client-side methods to detect whether it's still there
** Preferred solution would be to have some metamask-like browser extension that the app can read without having to handle hedera's client in the app at all (or re-init by just reading the browser extension)

* Private Keys
** Having users input their private keys into a text input field like a password is bad practice imho
** Builds bad habits. If users do not find entering private keys suspicious this could be used in social engineering
** Should either use a keystore file with a password or hopefully in the future a browser extension will be available

* Hashgraph error handling
** Need to come up with best practices for how to handle hasgraph error responses client-side
** Do not just log the errors. Put them somewhere conspicuous to the user
** Differentiate between errors coming from hcs, socket/server, and app
